import xml.etree.ElementTree as ET
from svgpathtools import parse_path, Line
import pygame

# Number of points into which the curve is divided as straight line segments
FLATTEN_SEGMENTS = 5 

# Upper limit for benchmarking segment generation
BENCHMARK_MAX_SEGMENTS = 10

# Figma generated svg files with corresponding offset
SVG_FILES = ['assets/track_border_inside.svg','assets/track_border_outside.svg']
OFFSETS = [(154, 175), (20,  40)]

WINDOW_SIZE = (1200, 900)
PREVIEW_LINE_COLOR = (255, 0, 0)
PREVIEW_LINE_WIDTH = 6
SVG_NAMESPACE = {'svg': 'http://www.w3.org/2000/svg'}


def flatten_path(path_obj, num_points):
    points = []
    for seg in path_obj:
        if isinstance(seg, Line):
            if not points or points[-1] != seg.start:
                points.append(seg.start)
            points.append(seg.end)
        else:
            for i in range(num_points):
                t = i / (num_points - 1) if num_points > 1 else 0
                points.append(seg.point(t))
    return points


def load_svg(svg_file, offset, num_points):
    tree = ET.parse(svg_file)
    root = tree.getroot()
    sequences = []

    for path in root.findall('.//svg:path', SVG_NAMESPACE):
        d = path.get('d')
        if not d:
            continue
        raw_path = parse_path(d)
        pts = flatten_path(raw_path, num_points)
        seq = [(p.real + offset[0], p.imag + offset[1]) for p in pts]
        sequences.append(seq)
    return sequences


def export_walls_py(sequences, filename='game/track.py'):
    with open(filename, 'w') as f:
        f.write("""# This file was generated by scripts/generate_track.py
import pygame

class Wall:
    def __init__(self, x1, y1, x2, y2):
        self.x1, self.y1, self.x2, self.y2 = x1, y1, x2, y2
    def draw(self, win):
        pygame.draw.line(win, (255,255,255), (self.x1, self.y1), (self.x2, self.y2), 5)

def get_walls():
    walls = []
""")
        for seq in sequences:
            closed = (seq[0] == seq[-1])
            pts = seq[:-1] if closed else seq
            for (x1, y1), (x2, y2) in zip(pts, pts[1:]):
                f.write(f"    walls.append(Wall({int(x1)}, {int(y1)}, "
                        f"{int(x2)}, {int(y2)}))\n")
            if closed:
                x1, y1 = pts[-1]
                x2, y2 = pts[0]
                f.write(f"    walls.append(Wall({int(x1)}, {int(y1)}, "
                        f"{int(x2)}, {int(y2)}))\n")
        f.write("    return walls\n")


def benchmark_segments(svg_files, offsets, max_steps=BENCHMARK_MAX_SEGMENTS):
    for n in range(1, max_steps + 1):
        total = 0
        for sf, off in zip(svg_files, offsets):
            seqs = load_svg(sf, off, n)
            for pts in seqs:
                total += len(pts) if pts[0] == pts[-1] else (len(pts) - 1)
        print(f'num_points={n} -> segments: {total}')


def export_tracks(svg_files, offsets, export_points):
    sequences = []
    for sf, off in zip(svg_files, offsets):
        sequences.extend(load_svg(sf, off, export_points))
    export_walls_py(sequences)
    print(f'Walls for num_points={export_points} exported to game/track.py.')


def run_preview(svg_files, offsets, display_points):
    sequences = []
    for sf, off in zip(svg_files, offsets):
        sequences.extend(load_svg(sf, off, display_points))

    pygame.init()
    screen = pygame.display.set_mode(WINDOW_SIZE)
    pygame.display.set_caption(f'SVG-Vorschau ({display_points})')
    clock = pygame.time.Clock()

    try:
        bg = pygame.image.load('assets/background.png').convert()
        bg = pygame.transform.scale(bg, WINDOW_SIZE)
    except pygame.error:
        bg = None

    running = True
    while running:
        for evt in pygame.event.get():
            if evt.type == pygame.QUIT:
                running = False

        screen.fill((0, 0, 0))
        if bg:
            screen.blit(bg, (0, 0))

        for seq in sequences:
            for (x1, y1), (x2, y2) in zip(seq, seq[1:]):
                pygame.draw.line(
                    screen,
                    PREVIEW_LINE_COLOR,
                    (x1, y1),
                    (x2, y2),
                    PREVIEW_LINE_WIDTH
                )

        pygame.display.flip()
        clock.tick(60)

    pygame.quit()
    return


if __name__ == '__main__':
    benchmark_segments(SVG_FILES, OFFSETS, BENCHMARK_MAX_SEGMENTS)
    export_tracks(SVG_FILES, OFFSETS, FLATTEN_SEGMENTS)
    run_preview(SVG_FILES, OFFSETS, FLATTEN_SEGMENTS)
